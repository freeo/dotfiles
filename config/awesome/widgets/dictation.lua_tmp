-- Modern Dictation Controller for Moshi STT
-- Clean, testable implementation using just_dictate.py
--
-- Features:
-- - Server process lifecycle management
-- - Clean UI state management  
-- - Comprehensive error handling
-- - Unit testing capabilities
-- - No embedded bash scripts
--
-- Usage:
--   local dictation = require("widgets.dictation")
--   dictation.Toggle()  -- Toggle dictation on/off
--
-- Testing:
--   dictation._test.run_all()  -- Run all tests

local dictation = {}

-- Dependencies
local wibox = require("wibox")
local awful = require("awful")
local gears = require("gears")
local beautiful = require("beautiful")
local naughty = require("naughty")
local dpi = beautiful.xresources.apply_dpi

-- External modules
local microphone = require("widgets.microphone")

-- Configuration
local config = {
    dictate_script = "/home/freeo/tools/nerd-dict-fork/tools/just_dictate.py",
    python_cmd = "mise exec python@3.11 -- python",
    moshi_server_path = "/home/freeo/.cargo/bin/moshi-server",
    timeout = 10, -- seconds to wait for server operations
    log_file = "/home/freeo/wb/awm_dict.log",
    debug = true
}

-- ============================================================================
-- DictationController: Manages server process lifecycle
-- ============================================================================

local DictationController = {}
DictationController.__index = DictationController

function DictationController.new()
    local self = setmetatable({}, DictationController)
    self.process_pid = nil
    self.is_running = false
    self.callbacks = {
        on_start = function() end,
        on_stop = function() end,
        on_error = function(msg) end
    }
    return self
end

function DictationController:set_callbacks(callbacks)
    for event, callback in pairs(callbacks) do
        if self.callbacks[event] then
            self.callbacks[event] = callback
        end
    end
end

function DictationController:_log(message)
    if config.debug then
        local timestamp = os.date("%Y-%m-%d %H:%M:%S")
        local log_entry = string.format("[%s] DictationController: %s\n", timestamp, message)
        
        -- Write to log file
        local file = io.open(config.log_file, "a")
        if file then
            file:write(log_entry)
            file:close()
        end
        
        -- Also print to stdout for debugging
        print("DICTATION: " .. message)
    end
end

function DictationController:_check_process_running()
    if not self.process_pid then
        return false
    end
    
    -- Check if process is still alive using kill -0
    local cmd = string.format("kill -0 %d 2>/dev/null", self.process_pid)
    local result = os.execute(cmd)
    return result == 0
end

function DictationController:start()
    self:_log("Attempting to start dictation")
    
    if self.is_running then
        self:_log("Dictation already running, ignoring start request")
        return
    end
    
    -- Build command with absolute moshi-server path
    local inner_cmd = string.format("%s %s --output auto", config.python_cmd, config.dictate_script)
    local cmd = string.format("env MOSHI_SERVER_PATH=%s %s", config.moshi_server_path, inner_cmd)
    self:_log("Executing command: " .. cmd)
    
    -- Start process with line callback to capture output
    self:_log("About to call awful.spawn.with_line_callback")
    
    local spawn_result = awful.spawn.with_line_callback(cmd, {
        stdout = function(line)
            self:_log("STDOUT: " .. line)
            
            -- Check for successful startup signals
            if line:match("üü¢ Server ready") or line:match("‚úÖ Connected to Kyutai") or 
               line:match("Server ready.*start speaking") or line:match("Connected to Kyutai server") then
                self:_log("DETECTED STARTUP SUCCESS SIGNAL: " .. line)
                self.is_running = true
                self.callbacks.on_start()
                self:_log("Dictation started successfully")
            
            -- Check for specific error conditions
            elseif line:match("‚ùå moshi%-server not found") then
                self.callbacks.on_error("moshi-server not found in PATH. Please install or check PATH configuration.")
            elseif line:match("‚ùå Connection error") or line:match("Connection call failed") then
                self.callbacks.on_error("Cannot connect to moshi-server. Server may not be running.")
            elseif line:match("‚ùå Error:") then
                self.callbacks.on_error("Dictation error: " .. line)
            end
        end,
        stderr = function(line)
            self:_log("STDERR: " .. line)
            
            -- Handle errors
            if line:match("Error") or line:match("Failed") then
                self.callbacks.on_error("Dictation error: " .. line)
            end
        end,
        exit = function(reason, code)
            self:_log(string.format("Process exited: reason=%s, code=%s", reason or "unknown", code or "unknown"))
            
            self.process_pid = nil
            self.is_running = false
            self.callbacks.on_stop()
        end
    })
    
    -- Check if spawn was successful
    if spawn_result then
        if type(spawn_result) == "number" then
            self.process_pid = spawn_result
            self:_log("Process started with PID: " .. spawn_result)
        else
            self:_log("Spawn returned: " .. tostring(spawn_result))
        end
    else
        self:_log("ERROR: awful.spawn.with_line_callback returned nil/false")
        self.callbacks.on_error("Failed to start dictation process - spawn failed")
    end
end

function DictationController:stop()
    self:_log("Attempting to stop dictation")
    
    if not self.is_running then
        self:_log("Dictation not running, ignoring stop request")
        return
    end
    
    if self.process_pid then
        -- Send SIGTERM to gracefully shutdown
        local cmd = string.format("kill -TERM %d", self.process_pid)
        self:_log("Sending SIGTERM to PID: " .. self.process_pid)
        
        awful.spawn.easy_async(cmd, function(stdout, stderr, reason, exit_code)
            self:_log(string.format("Kill command result: code=%s", exit_code or "unknown"))
            
            -- Give process time to cleanup
            gears.timer.start_new(2, function()
                if self:_check_process_running() then
                    -- Force kill if still running
                    local force_cmd = string.format("kill -KILL %d", self.process_pid)
                    self:_log("Force killing PID: " .. self.process_pid)
                    awful.spawn(force_cmd)
                end
                return false -- Don't repeat timer
            end)
        end)
    end
    
    -- Update state immediately for UI responsiveness
    self.is_running = false
    self.callbacks.on_stop()
end

function DictationController:toggle()
    self:_log(string.format("Toggle called: is_running=%s, process_pid=%s", 
        tostring(self.is_running), tostring(self.process_pid)))
    
    if self.is_running then
        self:_log("Calling stop() because is_running=true")
        self:stop()
    else
        self:_log("Calling start() because is_running=false")
        self:start()
    end
end

function DictationController:get_status()
    return {
        is_running = self.is_running,
        process_pid = self.process_pid,
        process_alive = self:_check_process_running()
    }
end

-- ============================================================================
-- UIManager: Manages the visual dictation status widget
-- ============================================================================

local UIManager = {}
UIManager.__index = UIManager

function UIManager.new()
    local self = setmetatable({}, UIManager)
    
    -- Screen reference
    local focused = awful.screen.focused()
    
    -- Create main container
    self.container = wibox({
        screen = focused,
        x = (focused.geometry.width / 2) - 80,
        y = focused.geometry.height - 128,
        width = 160,
        height = 64,
        bg = beautiful.hud_panel_bg or "#1e1e1e",
        shape = gears.shape.rounded_rect,
        visible = false,
        ontop = true,
        opacity = 0.9,
    })
    
    -- Create text widget
    self.text_widget = wibox.widget({
        widget = wibox.widget.textbox,
        valign = "center",
        halign = "center",
        markup = "<span foreground='#42239F'><b>dictation</b></span>",
        font = "sans 12",
    })
    
    -- Create status indicator
    self.status_indicator = wibox.widget({
        bg = "#9D6DCA",
        widget = wibox.widget.background,
        shape = gears.shape.rectangle,
        forced_height = 50,
        forced_width = 50,
    })
    
    -- Setup layout
    self.container:setup({
        {
            direction = "north",
            layout = wibox.container.rotate,
            wibox.container.margin(self.status_indicator, dpi(4), dpi(4), dpi(4), dpi(4), "#42239F"),
        },
        {
            self.text_widget,
            widget = wibox.container.place,
        },
        layout = wibox.layout.stack,
    })
    
    return self
end

function UIManager:show()
    self.container.visible = true
    microphone.On()
end

function UIManager:hide()
    self.container.visible = false
    microphone.Off()
end

function UIManager:update_status(is_running)
    if is_running then
        self.status_indicator.bg = "#4CAF50" -- Green for active
        self.text_widget.markup = "<span foreground='#4CAF50'><b>listening</b></span>"
    else
        self.status_indicator.bg = "#9D6DCA" -- Purple for inactive
        self.text_widget.markup = "<span foreground='#42239F'><b>dictation</b></span>"
    end
end

function UIManager:show_error(message)
    self.status_indicator.bg = "#F44336" -- Red for error
    self.text_widget.markup = "<span foreground='#F44336'><b>error</b></span>"
    
    -- Show error notification
    naughty.notify({
        title = "Dictation Error",
        text = message,
        preset = naughty.config.presets.critical
    })
end

-- ============================================================================
-- Main Dictation Module
-- ============================================================================

-- Initialize components
local controller = DictationController.new()
local ui = UIManager.new()

-- Setup callbacks
controller:set_callbacks({
    on_start = function()
        ui:show()
        ui:update_status(true)
        naughty.notify({
            title = "Dictation",
            text = "Started successfully",
            preset = naughty.config.presets.normal
        })
    end,
    
    on_stop = function()
        ui:hide()
        ui:update_status(false)
        naughty.notify({
            title = "Dictation", 
            text = "Stopped",
            preset = naughty.config.presets.normal
        })
    end,
    
    on_error = function(message)
        ui:show_error(message)
        
        -- Auto-hide error after 5 seconds
        gears.timer.start_new(5, function()
            ui:hide()
            ui:update_status(false)
            return false -- Don't repeat
        end)
    end
})

-- Public API
function dictation.Toggle()
    controller:toggle()
end

function dictation.Start()
    controller:start()
end

function dictation.Stop()
    controller:stop()
end

function dictation.GetStatus()
    return controller:get_status()
end

function dictation.SetConfig(new_config)
    for key, value in pairs(new_config) do
        if config[key] ~= nil then
            config[key] = value
        end
    end
end

-- ============================================================================
-- Testing Framework
-- ============================================================================

dictation._test = {}

-- Mock dependencies for testing
local function create_mock_awful()
    return {
        spawn = {
            with_line_callback = function(cmd, callbacks, start_callback)
                -- Simulate successful process start
                if start_callback then
                    start_callback(12345) -- Mock PID
                end
                
                -- Simulate stdout messages
                gears.timer.start_new(0.1, function()
                    if callbacks.stdout then
                        callbacks.stdout("Server ready - start speaking!")
                    end
                    return false
                end)
                
                return 12345
            end,
            easy_async = function(cmd, callback)
                gears.timer.start_new(0.1, function()
                    if callback then
                        callback("", "", "exit", 0)
                    end
                    return false
                end)
            end
        }
    }
end

function dictation._test.test_controller_creation()
    local test_controller = DictationController.new()
    
    assert(test_controller ~= nil, "Controller should be created")
    assert(test_controller.is_running == false, "Controller should start in stopped state")
    assert(test_controller.process_pid == nil, "Controller should have no PID initially")
    
    print("‚úì Controller creation test passed")
    return true
end

function dictation._test.test_controller_start_stop()
    local test_controller = DictationController.new()
    local started = false
    local stopped = false
    
    test_controller:set_callbacks({
        on_start = function() started = true end,
        on_stop = function() stopped = true end
    })
    
    -- Test start
    test_controller:start()
    
    -- Wait for async operations
    gears.timer.start_new(0.5, function()
        assert(started == true, "Start callback should be called")
        assert(test_controller.is_running == true, "Controller should be running")
        
        -- Test stop
        test_controller:stop()
        
        gears.timer.start_new(0.2, function()
            assert(stopped == true, "Stop callback should be called")
            assert(test_controller.is_running == false, "Controller should be stopped")
            
            print("‚úì Controller start/stop test passed")
            return false
        end)
        
        return false
    end)
    
    return true
end

function dictation._test.test_ui_show_hide()
    local test_ui = UIManager.new()
    
    -- Test show
    test_ui:show()
    assert(test_ui.container.visible == true, "UI should be visible after show()")
    
    -- Test hide  
    test_ui:hide()
    assert(test_ui.container.visible == false, "UI should be hidden after hide()")
    
    print("‚úì UI show/hide test passed")
    return true
end

function dictation._test.test_ui_status_updates()
    local test_ui = UIManager.new()
    
    -- Test running status
    test_ui:update_status(true)
    assert(test_ui.status_indicator.bg == "#4CAF50", "Status indicator should be green when running")
    
    -- Test stopped status
    test_ui:update_status(false)
    assert(test_ui.status_indicator.bg == "#9D6DCA", "Status indicator should be purple when stopped")
    
    print("‚úì UI status update test passed")
    return true
end

function dictation._test.test_config_management()
    local original_timeout = config.timeout
    
    dictation.SetConfig({ timeout = 20 })
    assert(config.timeout == 20, "Config should be updated")
    
    -- Restore original
    config.timeout = original_timeout
    
    print("‚úì Config management test passed")
    return true
end

function dictation._test.run_all()
    print("Running dictation module tests...")
    print("==================================")
    
    local tests = {
        dictation._test.test_controller_creation,
        dictation._test.test_ui_show_hide,
        dictation._test.test_ui_status_updates,
        dictation._test.test_config_management,
        -- Note: start_stop test requires async operations, run separately
    }
    
    local passed = 0
    local total = #tests
    
    for i, test in ipairs(tests) do
        local success, error_msg = pcall(test)
        if success then
            passed = passed + 1
        else
            print("‚úó Test " .. i .. " failed: " .. (error_msg or "unknown error"))
        end
    end
    
    print("==================================")
    print(string.format("Tests completed: %d/%d passed", passed, total))
    
    if passed == total then
        print("üéâ All tests passed!")
        
        -- Run async test separately
        print("\nRunning async test...")
        dictation._test.test_controller_start_stop()
        
    else
        print("‚ùå Some tests failed")
    end
    
    return passed == total
end

-- ============================================================================
-- Debug utilities
-- ============================================================================

function dictation._debug_info()
    local status = controller:get_status()
    
    print("Dictation Debug Info:")
    print("====================")
    print("Is running: " .. tostring(status.is_running))
    print("Process PID: " .. tostring(status.process_pid))
    print("Process alive: " .. tostring(status.process_alive))
    print("UI visible: " .. tostring(ui.container.visible))
    print("Config:")
    for key, value in pairs(config) do
        print("  " .. key .. ": " .. tostring(value))
    end
end

function dictation._test_command()
    print("Testing dictation command:")
    local inner_cmd = string.format("%s %s --output auto", config.python_cmd, config.dictate_script)
    local cmd = string.format("bash -c 'export PATH=%s:$PATH && %s'", config.cargo_path, inner_cmd)
    print("Command: " .. cmd)
    
    -- Test if files exist
    local script_file = io.open(config.dictate_script, "r")
    if script_file then
        print("‚úì Script file exists: " .. config.dictate_script)
        script_file:close()
    else
        print("‚úó Script file NOT found: " .. config.dictate_script)
    end
    
    -- Test mise command
    awful.spawn.easy_async("which mise", function(stdout, stderr, reason, exit_code)
        if exit_code == 0 then
            print("‚úì mise command available")
        else
            print("‚úó mise command NOT available")
        end
    end)
    
    -- Test moshi-server with correct PATH using bash wrapper
    awful.spawn.easy_async(string.format("bash -c 'export PATH=%s:$PATH && which moshi-server'", config.cargo_path), function(stdout, stderr, reason, exit_code)
        if exit_code == 0 then
            print("‚úì moshi-server available at: " .. stdout:gsub("%s+", ""))
        else
            print("‚úó moshi-server NOT found in PATH")
            print("  stderr: " .. (stderr or "none"))
        end
    end)
end

return dictation