"    ########################################################################
"  ##             /  .-',--.--. ,---.  ,---.  ,---. |  |,---.                ##
"  ##             |  `-,|  .--'| .-. :| .-. :| .-. |`-'(  .-'                ##
"  ##             |  .-'|  |   \   --.\   --.' '-' '   .-'  `)               ##
"  ##             `--'  `--'    `----' `----' `---'    `----'                ##
"  ##                                                                        ##
"  #########################  vim run commands file ###########################
"    ########################################################################
"    NEW
"
" Debugging mappings example
" :verbose map <c-j>
" ~/dotfiles/vimrc
"
" Plugin Ideas:
" better search:
" old syntax:
" /test/e+1
" new syntax:
" /test/el
" new options after /
" wbelge
" History of insertions! not yankring, but insertring!  Or even better: Repeat ring! '.' is repeat, <leader>. opens repeat ring, 
" lets you insert again your second insert or even older OR repeat previous
" actions instead of limiting to the last one!
"
" Intelligenteres marking up:
" F1 für *** === --- +++ switch 
" enter new buffer filetype txt
" emph und de-emph macros
" ä in der Suche fixen, ist ein <BS> statt nem ä.
"
" add to register
" let @v=""
" %s/MVP-\d*/\=setreg('V', [submatch(0),""])/n
" setreg('V', [submatch(0),"\n"])
 
" SMASH-Escape
imap jk <ESC>

let g:vimfiles = "~/.vim"
" let g:conemu = "C:\\Program Files\\ConEmu\\ConEmu64.exe /single -run"
let g:conemu = '"C:\Program Files\ConEmu\ConEmu64.exe" /single -run'

" Weird old windows workaround
if has('win32')
  let $PATH .= ';C:/Program Files/Git/usr/bin'
endif

set nocompatible
filetype off " required

" Last time it installed into bundle/vundle as well, two clones! issue?
" set runtimepath+=$HOME/.vim/bundle/Vundle.vim
" call vundle#rc('~/.vim/bundle')
"
" let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
" if empty(glob(data_dir . '/autoload/plug.vim'))
"   silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
"   autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
" endif

" let plugins_dir = data_dir . '/plugged'
" call plug#begin(plugins_dir)
"    Plug 'junegunn/vim-plug' " Keep this line to manage vim-plug itself


" Delete:
" Plug 'kchmck/vim-coffee-script'
" Plug 'sukima/xmledit/' " i never edit xml...
" Plug 'rhysd/nyaovim-popup-tooltip'
" Plug 'rhysd/nyaovim-markdown-preview'
" Plug 'rhysd/nyaovim-mini-browser'
"

"Plug 'tpope/vim-repeat'
"Plug 'tpope/vim-sensible'
"Plug 'tpope/vim-surround'
"Plug 'tpope/vim-rhubarb'
"Plug 'tpope/vim-dispatch'
"Plug 'tpope/vim-unimpaired'
"Plug 'matze/vim-move'
"Plug 'justinmk/vim-sneak'
"Plug 'paradigm/TextObjectify'
"Plug 'gorkunov/smartpairs.vim'
"Plug 'AndrewRadev/sideways.vim'
"" Base64 shortcuts:
"" <leader>atob: str to b64
"" <leader>btoa: b64 to str
"Plug 'christianrondeau/vim-base64'
"Plug 'statox/vim-compare-lines' " :CL <other line nr>
"Plug 'michaeljsmith/vim-indent-object' " <cmd>ii and <cmd>ai

" if !exists('g:vscode')
"   Plug 'freeo/vim-kalisi', { 'branch': 'dev-0.9'}
"   Plug 'mhinz/vim-startify'
"   Plug 'rhysd/clever-f.vim'
"   Plug 'tomtom/tcomment_vim'
"   Plug 'ctrlpvim/ctrlp.vim'
"   Plug 'bling/vim-airline'
"   Plug 'vim-airline/vim-airline-themes'
"   Plug 'Shougo/denite.nvim'
"   " TODO: do I need this if I use denite?
"   Plug 'cloudhead/neovim-fuzzy'
"   Plug 'Shougo/neoyank.vim'
"   Plug 'mileszs/ack.vim'
"   Plug 'majutsushi/tagbar' " TagbarToggle, side buffer with all tags. 
"   " Plug 'davidhalter/jedi-vim'
"   Plug 'luochen1990/rainbow'
"   Plug 'elzr/vim-json'
"   Plug 'tpope/vim-fugitive'
"   Plug 'tpope/vim-markdown'
"   Plug 'kana/vim-vspec'
"   Plug 'ervandew/supertab'
"   Plug 'vim-scripts/restore_view.vim'
"   Plug 'junegunn/vim-emoji'
"   Plug 'ryanoasis/vim-devicons'
"   Plug 'airblade/vim-gitgutter'
"   Plug 'etdev/vim-hexcolor'
"   Plug 'jpalardy/vim-slime'
"   Plug 'Chiel92/vim-autoformat'
"   Plug 'mattn/emmet-vim' " completion doesn't work ootb with vscode
"   Plug 'towolf/vim-helm'
"   Plug 'machakann/vim-highlightedyank'
"   Plug 'google/vim-jsonnet'
"   Plug 'Shougo/defx.nvim'
"   Plug 'lambdalisue/fern.vim'
"   Plug 'nvim-lua/plenary.nvim'
"   Plug 'nvim-lua/popup.nvim'
"   Plug 'nvim-telescope/telescope.nvim'
"   Plug 'junegunn/fzf.vim'
"   Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
"   Plug 'nvim-treesitter/nvim-treesitter-refactor'
"   " Plug 'neovim/nvim-lspconfig'
"   " Plug 'hrsh7th/cmp-nvim-lsp'
"   Plug 'hrsh7th/cmp-buffer'
"   Plug 'hrsh7th/cmp-path'
"   Plug 'hrsh7th/cmp-cmdline'
"   Plug 'hrsh7th/nvim-cmp'
"   Plug 'mfussenegger/nvim-dap'
"   Plug 'mxsdev/nvim-dap-vscode-js'
"   Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
"   Plug 'folke/which-key.nvim'
"   Plug 'shime/vim-livedown'
"   Plug 'fourjay/vim-password-store'
"   Plug 'nanotee/zoxide.vim'
"   " Plug 'liuchengxu/vim-clap'
"   Plug 'jvgrootveld/telescope-zoxide'
"   Plug 'mg979/vim-visual-multi', {'branch': 'master'}
"   Plug 'lambdalisue/vim-suda'
"   Plug 'ojroques/vim-oscyank' " OSC52
"
"   if has('nvim')
"     " Plug 'Vigemus/iron.nvim', { 'branch': 'lua/replace' }
"     " Plug 'wilywampa/vim-ipython' " vs iron.nvim
"     " Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
"     " If DIRVISH acts up or makes more trouble with autochdir, try defx.nvim
"     " Plug 'Shougo/defx.nvim'
"     " Plug 'justinmk/vim-dirvish'
"     " Plug 'zchee/deoplete-jedi'
"     " Plug 'Vigemus/iron.nvim'
"     " luafile $HOME/.config/nvim/plugins.lua
"     Plug 'equalsraf/neovim-gui-shim'
"     Plug 'Shougo/deol.nvim'
"     Plug 'nvim-orgmode/orgmode'
"     Plug 'mtdl9/vim-log-highlighting'
"     Plug 'SmiteshP/nvim-navic'
"     Plug 'rmagatti/goto-preview'
"     " Plug 'someone-stole-my-name/yaml-companion.nvim'
"     Plug 'msvechla/yaml-companion.nvim', { 'branch': 'kubernetes_crd_detection' }
"     Plug 'L3MON4D3/LuaSnip', {'tag': 'v2.*', 'do': 'make install_jsregexp'}
"     Plug 'saadparwaiz1/cmp_luasnip'
"   else
"     " Plug 'wilywampa/vim-ipython' " vs iron.nvim
"     " netrw is broken in neovim, dirvish is a simple replacement with fewer functions
"     Plug 'tpope/vim-vinegar'
"     Plug 'roxma/nvim-yarp'
"     if !has('mac')
"       " Plug 'Shougo/deoplete.nvim'
"       Plug 'roxma/vim-hug-neovim-rpc'
"     endif
"   endif
"   " let g:deoplete#enable_at_startup = 1
"
"   " if has("python3")
"   " Plug 'SirVer/ultisnips' " move to luasnip
"   " endif
"   Plug 'honza/vim-snippets'
"   Plug 'thinca/vim-ref'
"
"   " Syntax
"   Plug 'anntzer/python-syntax'
"   Plug 'othree/html5.vim'
"   Plug 'octol/vim-cpp-enhanced-highlight'
"   Plug 'leafgarland/typescript-vim'
"   Plug 'pangloss/vim-javascript'
"   " Plug 'git@bitbucket.org:freeo/vimtext-projectsens.git'
"   Plug 'hashivim/vim-terraform'
"   Plug 'evanleck/vim-svelte'
"
"   if has("win64")
"     Plug 'vim-scripts/Windows-PowerShell-Syntax-Plugin'
"   endif
"
"   if has('win32')
"     Plug 'obaland/vfiler.vim'
"   else
"     Plug 'kevinhwang91/rnvimr'
"   endif
"
" endif " !vscode

" call plug#end()

" XXX temporary until this is fixed:
" https://github.com/junegunn/vim-plug/issues/1270 
" if !isdirectory(plugins_dir) || empty(globpath(&runtimepath, '*/plug.vim'))
  " echo "No plugins found. Running :PlugInstall..."
  " silent! update | PlugInstall | update
" endif


" Not using these anymore
" Plug 'ternjs/tern_for_vim'  " 2024-10-14
" Bundle 'https://github.com/xolox/vim-easytags'
" Bundle 'https://github.com/xolox/vim-misc'
" Bundle 'https://github.com/xolox/vim-shell'
" GNU R project
" Plug 'jcfaria/Vim-R-plugin'
" Bundle 'https://github.com/lukaszkorecki/CoffeeTags'
" Has issues since WIN10 20161129
" Plug 'tomtom/quickfixsigns_vim'
" preserve from BundleClean deletion
" Plug 'Valloric/YouCompleteMe'
" Plug 'maralla/completor.vim' # vim 8 only
" Plug 'carlitux/deoplete-ternjs', { 'do': 'npm install -g tern' }
" Plug 'bfredl/nvim-ipy' " is this masking f5?
" neovim-fuzzyj uses
" https://github.com/jhawthorn/fzy

" Plug 'glacambre/firenvim', { 'do': { _ -> firenvim#install(0) } }

" https://github.com/Valloric/YouCompleteMe/wiki/Windows-Installation-Guide-for-Unix%E2%80%90like-Environments

" I forked this! Original repo is not maintained.
" Plug 'gorodinskiy/vim-coloresque.git'
" Plug 'powerman/vim-plugin-AnsiEsc'  " used for nvimpager, but then I found out:
"   1. they don't share plugins
"   2. nvimpager bundles its own AnsiEsc using the old vim-scrips/AnsiEsc.vim package (which works fine)

" Plug 'freeo/vim-saveunnamed'
" Plug 'hdima/python-syntax'
" until pull request is done
"https://github.com/hdima/python-syntax/pull/52
" Plug 'freeo/python-syntax'

" Forked: pytest-2 and pytest-3 support
" Plug 'pytest-vim-compiler'
" Plug 'freeo/vim-makegreen'
" Plug 'freeo/vim-ipython' " not working with newer ipython version

set completeopt=menu,menuone,noselect

imap <silent><expr> <Tab> luasnip#expand_or_jumpable() ? '<Plug>luasnip-expand-or-jump' : '<Tab>' 


" https://github.com/folke/which-key.nvim#%EF%B8%8F-configuration
" set timeoutlen 500

autocmd BufWritePre *.go lua goimports(1000)

" autocmd FileType go setlocal omnifunc=v:lua.vim.lsp.omnifunc



" No remote repo, preserve from BundleClean deletion
" Plug 'python-syntax-master'
if !has("nvim")
  Plug 'plugin_colors'
  echom "No nvim"
else
  if has("unix")
    if filereadable(expand("$HOME/.pyenv/shims/python3"))
      let g:python3_host_prog = "$HOME/.pyenv/shims/python3"
    else
      let g:python3_host_prog = "/usr/bin/python3"
    endif
  elseif has("mac")
    " let g:python3_host_prog = "/Users/freeo/.pyenv/versions/neovim/bin/python"
    let g:python_host_prog = "/usr/bin/python"
    let g:python3_host_prog = "/usr/local/bin/python3"
  elseif has('win32')
    let g:python3_host_prog = "C:/Python312/python.exe"
    let g:python_host_prog = "C:/Python27/python.exe"
  endif
endif
" outsourced kalisi colors, which belong to plugins
"




" Problem Plugins:
" Closetag
" Github repos of the user 'vim-scripts'
" => can omit the username part
" Good idea, but incompatible... revisit sometime (today: 25.8.2014)
" Bundle 'https://github.com/caigithub/a_indent'
" Not Windows 7 ready:
" Bundle 'https://github.com/neilagabriel/vim-geeknote'

" non github repos
" Bundle 'git://git.wincent.com/command-t.git'
" ...

filetype plugin indent on     " required!

" ############################################################################
"
" Cause issues in vscode
"
if !exists('g:vscode')
  cnoremap s/ s/\v
endif
nnoremap /  /\v


" Breaks TextObjectify behaviour!!!
" source $VIMRUNTIME/mswin.vim
" behave mswin

" TEMP XXX
" nnoremap <C-s> :w!<CR>
" nnoremap <C-s> :w!<CR>:color kalisi_dark<CR>

" autocmd BufWritePost ~/_vimrc :source ~/_vimrc | AirlineRefresh
" Temp Workaround
function! Workaround()
    execute "AirlineToggle"
    execute "AirlineToggle"
    execute "AirlineTheme ".g:airline_theme
endfunction

function! RefreshUI()
  if exists(':AirlineRefresh')
    AirlineRefresh
  else
    " Clear & redraw the screen, then redraw all statuslines.
    redraw!
    redrawstatus!
  endif
endfunction

" au BufWritePost .vimrc source $MYVIMRC | :call RefreshUI()

" autocmd BufWritePost ~/_vimrc :source ~/_vimrc | call Workaround()
" autocmd BufWritePost ~/_vimrc :source ~/_vimrc
" autocmd BufWritePost ~/_vimrc :source ~/_vimrc | call RefreshUI()


" disable, use deoplete-jedi with 
if has('nvim')
  let g:jedi#completions_enabled = 0
else
" OLD: Turn it off... it sucks without YCM
  let g:jedi#completions_enabled = 1
endif
" let g:jedi#auto_initialization = 1
" let g:jedi#use_tabs_not_buffers = 0 
" let g:jedi#force_py_version = 3 #deprecated?

let g:pypypath ='!C:/pypy-2.2.1-win32/pypy.exe'
exec("command! -nargs=1 Pypy ".g:pypypath." <args>")


" XXX
function! SeekAndDestroy(old, new)
  " Sounds fancier then SeekAndReplace
  " source: https://coderwall.com/p/7ol_ja
  " http://stackoverflow.com/questions/4792561/how-to-do-search-replace-with-ack-in-vim
  exe '!ack '.a:old.' -l --print0 | xargs -0 sed -i ''' 's/'.a:old.'/'.a:new.'/g'''
endfunction

set backspace=indent,eol,start
set whichwrap+=<,>,h,l
set mousemodel=popup

"--- The following adds a sweet menu, press F4 to use it.
" source $VIMRUNTIME/menu.vim
set wildmenu
" set cpo-=<
set cpoptions=aABceFs
" set cpoptions=B
set wcm=<C-Z>

" set guioptions-=T " remove (T)oolbar from guioptions
" set guioptions-=m " and the (m)enu
" set guioptions-=e " remove guitabline, use non gui instead
" set guioptions=g
" set guioptions+=m
" set guioptions=
set guioptions=m
set shortmess+=I
set winaltkeys=no
set nocursorline
set wildmenu
set wildmode=list:longest,full
" Set 5 lines to the cursor - when moving vertically using j/k
set scrolloff=4 "abb: scrolloff
" For regular expressions turn magic on
set magic

" Remember info about open buffers on close, restore sessions 
set viminfo='1025,f1,%1024,h

" persistent-undo
" http://albertomiorin.com/
" set undodir=~/vimfiles/undo
" let &undodir=g:vimfiles.'/undo'
exec 'set undodir='.g:vimfiles.'/undo'
set undofile

" XXX
if has("directx")
  " set renderoptions=type:directx,gamma:1.0,contrast:0.2,level:1.0,geom:1,renmode:5,taamode:1
  set renderoptions=type:directx,gamma:1.0,contrast:0.1,level:1.0,geom:1,renmode:5,taamode:1
endif

" => Status line
""""""""""""""""""""""""""""""
" Always show the status line
set laststatus=2
" Format the status line
" set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l

" Yankring OBSOLETE? XXX
" Support for yankring
set viminfo+=!
" if has("gui_running")
"   if has("gui_win32")
"     let g:yankring_history_dir="~/vimfiles/cache/"
"   elseif has("gui_gtk2")
"     let g:yankring_history_dir="~/.vim/cache/"
"   endif
" endif

"CtrlP
map <leader><Tab> :CtrlPBuffer<CR>
noremap <leader>` :CtrlPMRUFiles<CR>
" And default: <C-P> :CtrlP<CR>
"
" https://github.com/cloudhead/neovim-fuzzy
" disable until Santa is through
" nnoremap <C-p> :FuzzyOpen<CR>
"
" How to make this the default?
" Once inside the prompt:~
"   <c-d>
"     Toggle between full-path search and filename only search.
"     Note: in filename mode, the prompt's base is '>d>' instead of '>>>'
"
let g:ctrlp_show_hidden = 1

noremap <s-tab> :Startify<CR>

" User Interface
" --------------
" activate wildmenu, permanent ruler and disable Toolbar, and add line
" highlightng as well as numbers.
" And disable the sucking pydoc preview window for the omni completion
" also highlight current line and disable the blinking cursor.
set wildmenu
set ruler
"set guioptions-=T
"set completeopt-=preview

" Statusbar and Linenumbers
" -------------------------
"  Make the command line two lines heigh and change the statusline display to
"  something that looks useful.
set cmdheight=1
"set laststatus=2
" set statusline=[%l,%c\ %P%M]\ %f\ %r%h%w

" Tab Settings
" set smarttab " XXX problems?
set tabstop=2
set shiftwidth=2
set softtabstop=2

" utf-8 default encoding
set encoding=utf-8
scriptencoding utf-8

" Better Search
" -------------
set hlsearch
set incsearch
set showmatch

" SATAN! set paste mach SMASH escape jk kaputt, wenn die Datei gesourced wurde!
" Warum???
set nopaste
" ist jetzt zwar für jeden Dateityp gesetzt, jedoch global besser....
set expandtab

set wrap linebreak nolist
" XXX new in 7.4.338, test thoroughly 

" 2023 04 14 still relevant?
" try
"   set breakindent
"   catch E518
" endtry

" set textwidth=80
set textwidth=110
" set formatoptions=tcq
set formatoptions=cq
set showbreak=…

set ignorecase
set smartcase
"set commentstring = \ #\ %s
" set foldlevel=0
" use clipboard for every yank and vice versa
if has("nvim")
  set clipboard+=unnamedplus
  else
  set clipboard+=unnamed
endif

nmap <leader>c <Plug>OSCYankOperator  
vmap <leader>y <Plug>OSCYankVisual


" setglobal relativenumber "disables absolute numbers in ruler
set relativenumber "disables absolute numbers in ruler
" setglobal nonumber
set showmode
set showcmd
set hidden
set ttyfast
" XXX
set lazyredraw

set showtabline=1

if !has('mac')
  if !has('nvim')
    set cryptmethod=blowfish2
    set pythonthreedll=python38.dll
  else
    set termguicolors
  endif
endif

hi Cursor guifg=#ffffff guibg=#ff0000
hi Cursor2 guifg=#ffffff guibg=#ff0000
if has('mac')
  set termguicolors
  set guicursor=n-v-c:block,i-ci-ve:ver25,r-cr:hor20,o:hor50
                  \,a:blinkon0-Cursor/lCursor
                  \,sm:block-blinkwait175-blinkoff150-blinkon175

elseif has('win32')
  echom "no mac block"
  set termguicolors
  set guicursor=n-v-c-sm:block-Cursor/lCursor,i-ci-ve:ver25-Cursor,r-cr-o:hor20
endif

set spelllang=de_20,en

try
    language messages en
    language English_United States
    language messages en_US.UTF-8
    language en_US.UTF-8
catch /E197\|E319/
    " E197 wrong locale error
    " E319 nvim doesn't have this feature
endtry

set list
set listchars=tab:›\ ,trail:\ ,extends:…
" set listchars=tab:›…,trail:░,extends:
"░▒▓
set completefunc=emoji#complete
" https://vimways.org/2018/the-power-of-diff/
" set diffopt+=algorithm:internal " Default
" set diffopt+=algorithm:patience
set diffopt+=algorithm:histogram

" XXX autochdir doesn't work with dirvish, low prio, but it will come
" Python execution needs autochdir at numerous points
" dirvish is out for many reasons (discovered ranger, emacs, fzf etc.)
" nvim terminal requires autochdir for tracking the terminal folder when using cd
set autochdir

"## REMAPPINGS ##########################################################

" specialkey TODO
" Delete in insert more
  " was already defined somewhere, but gave the idea for 
  " C-H; C-L delete
inoremap  <BS>
inoremap  <DEL>

" let isfname=@,48-57,/,\,.,-,_,+,,,#,$,%,{,},[,],:,@-@,!,~,=




" Leader
" ------
" sets leader to ',' and localleader to "\"
" let mapleader=","
nnoremap <Space> <nop>
map <Space> \
let g:mapleader="\\"
" let  maplocalleader="\\"

" Re-select visal block after indenting
" http://vimrcfu.com/snippet/14
vnoremap < <gv
vnoremap > >gv


" Search
" 2 two command on one mapping
" nur noh
nnoremap <leader>/ :noh<CR>
nnoremap <ESC> :noh<CR>

" beide ausführen:
"nnoremap <leader>/ :noh<CR> :call Deactivate_Highlights()<CR>
"

" Highlight doublespaced keywords
" nnoremap <leader>hk /   [a-zA-ZäÄüÜöÖß.,;:()?!]\+   \
" nnoremap <leader>hk :call Toggle_HLite_Keywords()\
" nnoremap <leader>h :call Toggle_HLite_Keywords()\\
" TODO: Inspect why do I need this?
" nnoremap <leader>h :call Toggle_HLite_Keywords()<CR>

" Restore map increment number c-a ctrl-a
" nunmap <C-a>

" excluded leading whitespace
" 2 whitespaces make a special manual keyword
" http://superuser.com/questions/505727/is-there-a-pattern-like-in-vim
let g:keyword_bool = 0 

function! Toggle_HLite_Keywords()
  syn match spckeyword "\(^\s*\)\@<!  [a-zA-ZäÄüÜöÖß\-.,;()?!]\+" containedin=ALL
  if g:keyword_bool == 0 
    hi link spckeyword Type " Statement
    let g:keyword_bool = 1 
    echo "Highlight Keywords ON"
    " hi spckeyword  guifg=#94be54
  elseif g:keyword_bool == 1
    hi link spckeyword NONE
    let g:keyword_bool = 0
    echo "Highlight Keywords OFF"
  endif
endfunction


" too slow
" autocmd BufEnter * call Highlight_Keywords_BufEnter()

" function Highlight_Keywords_BufEnter()
"   " if exists("g:keyword_bool"):
"     if g:keyword_bool == 1 
"       " if !(syn list spckeyword)
"         " !exists("syn spckeyword")
"         " syn match spckeyword "\(^\s*\)\@<!  [a-zA-ZäÄüÜöÖß\-.,;()?!]\+" containedin=ALL
"         " endif
"       hi link spckeyword  Type " Statement
"     endif
" endfunction
" 

    " elseif g:keyword_bool == 0
    "   hi link spckeyword NONE

function! ReColor()
  hi CursorLineNr guifg=#bbbbbb guibg=#b02222 gui=bold
  hi Cursor guibg=#d80000 guifg=#ffffff 
  " hi MatchParen  guifg=#000000 guibg=#771111 gui=bold
  hi MatchParen  guifg=#444444 gui=bold ctermbg=1 guibg=#775555
endfunction

map <F11> :call ReColor()<CR>

" make spaces around word with surround, so they get highlighted
" two literal spaces at the end
"nmap <leader>kw ysaW  
" make single space Keyword binding and jump to end of the WORD
nmap <leader>h hEBi <Esc>E

function! SetWDToCurrentFile()
  " exe "!cd %:p:h" " doesn't work for python
  exe "cd %:h"
  exe "pwd"
endfunction

" change working directory to current files path
nnoremap <leader>cd :silent! call SetWDToCurrentFile()<bar>:pwd<CR>

" if has('nvim')
"   " avoid "press ENTER..."
"   nnoremap <leader>cd :call jobstart("cd %:p:h")<bar>:pwd<CR>
" endif

"Reselect pasted text, windows style pasting
"best for indentation
" nnoremap <leader>v V`]

nnoremap <leader>r :RainbowToggle<CR>
nnoremap <leader>a :Ack <C-r><C-w>

let g:ackprg = "ag"

"Marks
nnoremap <leader>m :marks<CR>

"faster scrolling with these shortcuts
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>

" nnoremap <C-j> <C-e>j
" nnoremap <C-k> <C-y>k

" Map Y to act like D and C, i.e. to yank until EOL, rather than act as yy,
" which is the default
nmap Y y$
" OBSOLETE, yankring threwn out:
" for YANKRING to work LIKE the previous mapping:
" the usual way doesn't work with yankring!!!!
function! YRRunAfterMaps()
   nnoremap Y   :<C-U>YRYankCount 'y$'<CR>
endfunction

"EPIC INSERT AND COMMAND ESCAPE REMAP
" Press Shift-Space (may not work on your system).
" imap <S-Space> <Esc>
" vmap <S-Space> <Esc>
" nmap <S-Space> <Esc>
" cmap <S-Space> <Esc>

" im ap <S-Space> call exitInsert()
" nnoremap <S-Space> i
" nnoremap <S-Space> a


" Cripples visual mode totally! First select using j, oh too many lines...
" press k. What? Visual mode gone? Why???
" Having j bound also goes into operator pending mode: delay!
" vmap jk <ESC> " Don't ever use!

function! ExitInsert()
<Esc>
endfunction
" allow the . to execute once for each line of a visual selection
" EXAMPLE: // for commenting
vnoremap . :normal .<CR>

"CTRL K hightlights current word containing the cursor
"nnoremap <C-K> :call HighlightNearCursor()<CR>
function! HighlightNearCursor()
  if !exists("s:highlightcursor")
    match Todo /\k*\%#\k*/
    let s:highlightcursor=1
  else
    match None
    unlet s:highlightcursor
  endif
endfunction

let g:slime_target = "kitty"

autocmd FileType htmldjango inoremap {% {% %}<left><left><left>
autocmd FileType htmldjango inoremap {{ {{ }}<left><left><left>

" PYDICTION SETTINGS
" 'C:/vim/vimfiles/ftplugin/pydiction/complete-dict'
" let g:pydiction_location = 'C:/Program Files/Vim/vim73/ftplugin/pydiction/complete-dict'
" let g:pydiction_menu_height = 20

""""""""""""""""""""""""""""""
" => Visual mode related
""""""""""""""""""""""""""""""
" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
vnoremap <silent> * :call VisualSelection('f')<CR>
vnoremap <silent> # :call VisualSelection('b')<CR>

" Treat long lines as break lines (useful when moving around in them)
" http://www.reddit.com/r/vim/comments/2k4cbr/problem_with_gj_and_gk/
" nnoremap <expr> j v:count ? 'j' : 'gj'
" nnoremap <expr> k v:count ? 'k' : 'gk'
 
" Origins of the line, 
" Supplying a count to a map
" and help v:count
" http://vim.wikia.com/wiki/Mapping_keys_in_Vim_-_Tutorial_(Part_2)
" nnoremap <silent> j :<C-U>call Down(v:count)<CR>
" vnoremap <silent> j gj
"
" nnoremap <silent> k :<C-U>call Up(v:count)<CR>
" vnoremap <silent> k gk

function! Down(vcount)
  if a:vcount == 0
    exe "normal! gj"
  else
    exe "normal! ". a:vcount ."j"
  endif
endfunction

function! Up(vcount)
  if a:vcount == 0
    exe "normal! gk"
  else
    exe "normal! ". a:vcount ."k"
  endif
endfunction

" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l


"Folding
"
" set foldmethod=manual
"set foldmethod=indent

"use indent to create folds on file load, then set fold method to manual.
" tested, this sucks
" augroup vimrc
"   au BufReadPre * setlocal foldmethod=indent
"   au BufWinEnter * if &fdm == 'indent' | setlocal foldmethod=manual | endif
" 
" augroup END

" Folding visual selection with SPACE, or toggling inside a fold
" nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
" vnoremap <Space> zf

" automatic Folding files, so folds won't get lost
set viewdir=~/.vim/view/
" let &viewdir= g:vimfiles ."/view/"

" set viewoptions=folds
" Restoring cursor is badly implemented in views. Restorting the cursors last
" position is realized with another method, 
" autocmd BufWinLeave *.* silent mkview
" autocmd BufWinEnter *.* silent loadview

" Works fine, but replaced by restore_view.vim plugin
" autocmd BufWinLeave ?* silent mkview
" autocmd BufWinEnter ?* silent loadview

" recommended by restore_vim.vim
" set viewoptions=cursor,folds,slash,unix
" set viewoptions=folds,slash,unix " removed cursor due to bad implementation
set viewoptions=slash,unix " removed cursor due to bad implementation

" FOLDTEXT
set foldtext=MyFoldText()
function! MyFoldText()
  let line = getline(v:foldstart)
  let sub = substitute(line, '/\*\|\*/\|{{{\d\=', '', 'g')
  " return v:folddashes . sub
  return v:foldend - v:foldstart +1 .": " . sub
endfunction

" nnoremap <leader><space> za


" Return to last edit cursor position when opening files (You want this!)
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif

" Buffers
" Close the current buffer
map <leader>k :Bclose<cr>
" Close
map <leader>q :q!<cr>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Editing mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Remap VIM 0 to first non-blank character
map 0 ^

" switched to vim-move, works for visual mode, not like these vmaps
" Move a line of text using ALT+[jk]
" nmap <M-j> mz:m+<cr>`z
" nmap <M-k> mz:m-2<cr>`z
" vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z "
" vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z

" Delete trailing white space on save, useful for Python and CoffeeScript ;)
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc
" autocmd BufWrite *.py :call DeleteTrailingWS()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => vimgrep searching and cope displaying
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" When you press gv you vimgrep after the selected text
vnoremap <silent> gv :call VisualSelection('gv')<CR>

" Vimgreps in the current file
map <leader><v> :vimgrep // %<left><left><left>

" When you press <leader>r you can search and replace the selected text
vnoremap <silent> <leader>r :call VisualSelection('replace')<CR>

" Visuals
" =====================

if has("win32")
  set guifont=FiraCode\ Nerd\ Font\ Mono:h16
  " set guifont=Cousine\ NF:h12:cANSI:qDRAFT
  " exec "Guifont! Cousine NF:h12:cANSI:qDRAFT"
endif

if has("gui_running")
  set go-=TlLrR
  set lines=55
  set columns=115
  " winpos 1132 0
  if has("gui_gtk2")
    " set guifont=BlexMono\ Nerd \Font \Mono 9
    set guifont=Liberation\ Mono\ for\ Powerline\ 9,
                \Liberation\ Mono\ 9,
  elseif has("gui_win32")
    set guifont=JetBrainsMonoNL\ NFM:h16
    " set guifont=Cousine\ NF:h12:cANSI:qDRAFT,
    " \Cousine_NF:h12:cANSI:qDRAFT,
    " \Consolas:h10,
    " \Lucida_Console:h10
  elseif has("gui_macvim")
    set guifont=
\Cousine_Nerd_Font_Mono:h18,
\Roboto_Mono:h18
  endif
else
  if &term == "win32"
    let g:airline_powerline_fonts=1
    " let g:airline_left_sep=''
    " let g:airline_right_sep=''
    set visualbell
    " ConEmu only! Doesn't work with vanilla powershell.exe
    if $is_powershell
        " cursor not working, unreliable, slow
        " $is_powershell is an ENV variable set in the powershell $profile
        " set term=xterm
        " set t_Co=256
        " let &t_AB="\e[48;5;%dm"
        " let &t_AF="\e[38;5;%dm"
    else
        colorscheme default
        let g:airline_theme=''
    endif

  " MinTTY mode-dependent cursor
  elseif &term == "xterm-256color"
    let &t_ti.="\e[1 q"
    let &t_SI.="\e[5 q"
    let &t_EI.="\e[1 q"
    let &t_te.="\e[0 q"
  endif
endif

if exists('g:neovide')
    " set guifont=Cousine\ Nerd\ Font\ Mono:h16:cANSI:qDRAFT
    " set guifont=Cousine_Nerd_Font_Mono:h16
    set guifont=JetBrainsMonoNL\ NFM:h16
endif

syntax enable " Syntax Colors

